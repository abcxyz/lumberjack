// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuditLogAgentClient is the client API for AuditLogAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuditLogAgentClient interface {
	ProcessLog(ctx context.Context, in *AuditLogRequest, opts ...grpc.CallOption) (*AuditLogResponse, error)
}

type auditLogAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditLogAgentClient(cc grpc.ClientConnInterface) AuditLogAgentClient {
	return &auditLogAgentClient{cc}
}

func (c *auditLogAgentClient) ProcessLog(ctx context.Context, in *AuditLogRequest, opts ...grpc.CallOption) (*AuditLogResponse, error) {
	out := new(AuditLogResponse)
	err := c.cc.Invoke(ctx, "/abcxyz.lumberjack.AuditLogAgent/ProcessLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditLogAgentServer is the server API for AuditLogAgent service.
// All implementations must embed UnimplementedAuditLogAgentServer
// for forward compatibility
type AuditLogAgentServer interface {
	ProcessLog(context.Context, *AuditLogRequest) (*AuditLogResponse, error)
	mustEmbedUnimplementedAuditLogAgentServer()
}

// UnimplementedAuditLogAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAuditLogAgentServer struct {
}

func (UnimplementedAuditLogAgentServer) ProcessLog(context.Context, *AuditLogRequest) (*AuditLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessLog not implemented")
}
func (UnimplementedAuditLogAgentServer) mustEmbedUnimplementedAuditLogAgentServer() {}

// UnsafeAuditLogAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuditLogAgentServer will
// result in compilation errors.
type UnsafeAuditLogAgentServer interface {
	mustEmbedUnimplementedAuditLogAgentServer()
}

func RegisterAuditLogAgentServer(s grpc.ServiceRegistrar, srv AuditLogAgentServer) {
	s.RegisterService(&AuditLogAgent_ServiceDesc, srv)
}

func _AuditLogAgent_ProcessLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditLogAgentServer).ProcessLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abcxyz.lumberjack.AuditLogAgent/ProcessLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditLogAgentServer).ProcessLog(ctx, req.(*AuditLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuditLogAgent_ServiceDesc is the grpc.ServiceDesc for AuditLogAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuditLogAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "abcxyz.lumberjack.AuditLogAgent",
	HandlerType: (*AuditLogAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessLog",
			Handler:    _AuditLogAgent_ProcessLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/v1alpha1/audit_log_agent.proto",
}
