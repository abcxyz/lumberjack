# Copyright 2023 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'ci'

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:
  workflow_call:
  merge_group:
    types: ['checks_requested']

env:
  DOCKER_REGISTRY: 'us-docker.pkg.dev'
  DOCKER_TAG: '${{ github.sha }}'
  DOCKER_REPO: 'us-docker.pkg.dev/lumberjack-ci-images-i-1f/ci-images'
  WIF_PROVIDER: 'projects/567170510917/locations/global/workloadIdentityPools/github-automation/providers/lumberjack-ci-i'
  WIF_SERVICE_ACCOUNT: 'github-automation-bot@gha-lumberjack-ci-i-9d0848.iam.gserviceaccount.com'
  SERVER_PROJECT_ID: 'lumberjack-server-i-8eb3ef'
  CLIENT_PROJECT_ID: 'lumberjack-app-i-84af7b'
  SERVER_RUN_SA: 'server-run-22ad10@lumberjack-server-i-8eb3ef.iam.gserviceaccount.com'
  CLIENT_RUN_SA: 'client-run-22ad10@lumberjack-app-i-84af7b.iam.gserviceaccount.com'
  BIGQUERY_DATASET_ID: 'audit_logs.audit_abcxyz_data_access'

concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}-ci'
  cancel-in-progress: true

jobs:
  # Unit tests - java, go
  go_test:
    uses: 'abcxyz/actions/.github/workflows/go-test.yml@main' # ratchet:exclude

  java_test:
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4

      - uses: 'abcxyz/actions/.github/actions/setup-java-strict@27f8c90b29ea811a4b13c271608ee97cb3fb7ffd' # ratchet:exclude

      # We don't actually need to authenticate here, but the Artifact Regsitry
      # Wagon[1] expects authentication and infinitely retries if it does not
      # find any.
      #
      # [1]: https://github.com/GoogleCloudPlatform/artifact-registry-maven-tools
      - uses: 'google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f' # ratchet:google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'

          # The Artifact Registry maven wagon looks for Google Application Default Credentials.
          # https://github.com/GoogleCloudPlatform/artifact-registry-maven-tools
      - name: 'Run tests'
        run: |-
          mvn --no-transfer-progress --batch-mode clean test -f clients/java-logger

  # Build the main lumberjack server and push to artifact registry
  build-lumberjack-server:
    runs-on: 'ubuntu-latest'
    needs:
      - 'go_test'
      - 'java_test'
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: 'docker/setup-qemu-action@4574d27a4764455b42196d70a065bc6853246a25' # ratchet:docker/setup-qemu-action@v3

      - uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4

      - uses: 'actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34' # ratchet:actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - id: 'auth'
        uses: 'google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f' # ratchet:google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'

      - uses: 'docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567' # ratchet:docker/login-action@v3
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.DOCKER_REGISTRY }}'

      # goreleaser requires a tag to publish images to container registry.
      # We create a local tag to make it happy.
      - run: |-
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -f -a v0.0.0-ci -m "CI run"

      - name: 'Build the main server container and push to the registry with goreleaser'
        uses: 'goreleaser/goreleaser-action@90a3faa9d0182683851fbfa97ca1a2cb983bfca3' # ratchet:goreleaser/goreleaser-action@v6
        with:
          version: 'v1.16.1' # Manually pinned
          args: 'release -f .goreleaser.docker.yaml --clean --skip-validate'

  # Build the 4 integration test client variants, go-grpc, go-http, java-grpc and java-http
  build-go-grpc-client:
    runs-on: 'ubuntu-latest'
    needs:
      - 'go_test'
      - 'java_test'
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      prefix: 'ljc'
      lang: 'go'
      type: 'grpc'
      file: './clients/go/test/grpc-app/Dockerfile'
      run_from: './'
    steps:
      - uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4

      - id: 'auth'
        uses: 'google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f' # ratchet:google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'

      - uses: 'docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567' # ratchet:docker/login-action@v3
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.DOCKER_REGISTRY }}'

      - name: 'Build the integration test server container and push to the registry'
        uses: 'docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991' # ratchet:docker/build-push-action@v6
        with:
          push: true
          tags: '${{ env.DOCKER_REPO }}/${{env.prefix}}-${{env.lang}}-${{env.type}}:${{env.DOCKER_TAG}}'
          file: '${{ env.file }}'
          context: '${{ env.run_from }}'

  build-go-http-client:
    runs-on: 'ubuntu-latest'
    needs:
      - 'go_test'
      - 'java_test'
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      prefix: 'ljc'
      lang: 'go'
      type: 'http'
      file: './clients/go/test/shell/Dockerfile'
      run_from: './'
    steps:
      - uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4

      - id: 'auth'
        uses: 'google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f' # ratchet:google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'

      - uses: 'docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567' # ratchet:docker/login-action@v3
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.DOCKER_REGISTRY }}'

      - name: 'Build the integration test server container and push to the registry'
        uses: 'docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991' # ratchet:docker/build-push-action@v6
        with:
          push: true
          tags: '${{ env.DOCKER_REPO }}/${{env.prefix}}-${{env.lang}}-${{env.type}}:${{env.DOCKER_TAG}}'
          file: '${{ env.file }}'
          context: '${{ env.run_from }}'

  # build is a virtual job that is used as dependencies for later jobs.
  build:
    runs-on: 'ubuntu-latest'
    needs:
      - 'build-lumberjack-server'
      - 'build-go-grpc-client'
      - 'build-go-http-client'
    steps:
      - run: 'echo build complete'

  # Deploy integration test infrastructure and run integration tests
  integration:
    runs-on: 'ubuntu-latest'
    needs:
      - 'build'
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      tf_module_dir: './terraform/modules/ci'
    steps:
      - uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4

      - id: 'auth'
        uses: 'google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f' # ratchet:google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'

      # TODO: Workload Identity doesn't work with GCS Provider.
      # https://github.com/google-github-actions/auth/issues/89
      - name: 'Workaround Terraform issue'
        shell: 'bash'
        run: |-
          echo "GOOGLE_OAUTH_ACCESS_TOKEN=${{ steps.auth.outputs.access_token }}" >> "${GITHUB_ENV}"

      - uses: 'hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd' # ratchet:hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: 'Write tfvars file'
        env:
          client_images: '{"ljc-go-grpc":"${{env.DOCKER_REPO}}/ljc-go-grpc:${{env.DOCKER_TAG}}","ljc-go-http":"${{env.DOCKER_REPO}}/ljc-go-http:${{env.DOCKER_TAG}}"}'
          server_image: '${{env.DOCKER_REPO}}/lumberjack-server:${{env.DOCKER_TAG}}'
        run: |
          var_file=/tmp/ci.tfvars

          cat > "${var_file}" <<EOF
          commit_sha="${{ env.DOCKER_TAG }}"
          server_project_id="${{ env.SERVER_PROJECT_ID }}"
          server_image="${{ env.server_image }}"
          server_run_sa="${{ env.SERVER_RUN_SA }}"
          server_service_name="lumberjack-server"
          client_project_id="${{ env.CLIENT_PROJECT_ID }}"
          client_run_sa="${{ env.CLIENT_RUN_SA }}"
          client_images=${{ env.client_images }}
          EOF

          cat ${var_file}
          echo "tfvar_file=${var_file}" >> "${GITHUB_ENV}"

      - name: 'Init the terraform infrastructure'
        run: 'terraform -chdir=${{ env.tf_module_dir }} init'

      - name: 'Apply the infrastructure updates'
        id: 'tf_apply'
        run: |
          terraform -chdir=${{ env.tf_module_dir}} apply -auto-approve -var-file=${{env.tfvar_file}}

          terraform -chdir=${{ env.tf_module_dir}} output -json ingestion_backend_client_endpoints | jq -c > ingestion_backend_client_output.json

          terraform -chdir=${{ env.tf_module_dir}} output -json cloudlogging_backend_client_endpoints | jq -c > cloudlogging_backend_client_output.json

          ingestion_backend_grpc_client_endpoints=$(jq -c '{"ljc-go-grpc"} | to_entries | map(.value|tostring)' < ingestion_backend_client_output.json)
          ingestion_backend_http_client_endpoints=$(jq -c '{"ljc-go-http"} | to_entries | map(.value|tostring)' < ingestion_backend_client_output.json)

          cloudlogging_backend_grpc_client_endpoints=$(jq -c '{"ljc-go-grpc"} | to_entries | map(.value|tostring)' < cloudlogging_backend_client_output.json)
          cloudlogging_backend_http_client_endpoints=$(jq -c '{"ljc-go-http"} | to_entries | map(.value|tostring)' < cloudlogging_backend_client_output.json)

          grpc_client_endpoints=$(echo -e "${ingestion_backend_grpc_client_endpoints}${cloudlogging_backend_grpc_client_endpoints}" | jq -cs 'flatten(1)')
          http_client_endpoints=$(echo -e "${ingestion_backend_http_client_endpoints}${cloudlogging_backend_http_client_endpoints}" | jq -cs 'flatten(1)')

          echo "GRPC_ENDPOINTS=${grpc_client_endpoints}" >> "${GITHUB_ENV}"
          echo "HTTP_ENDPOINTS=${http_client_endpoints}" >> "${GITHUB_ENV}"

      - uses: 'actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34' # ratchet:actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: 'Run tests'
        env:
          TEST_INTEGRATION: 'true'
          AUDIT_CLIENT_TEST_JUSTIFICATION_SUB: '${{ env.WIF_SERVICE_ACCOUNT }}'
          AUDIT_CLIENT_TEST_PROJECT_ID: '${{ env.SERVER_PROJECT_ID }}'
          AUDIT_CLIENT_TEST_BIGQUERY_DATASET: '${{ env.BIGQUERY_DATASET_ID }}'
          AUDIT_CLIENT_TEST_PRIVATE_KEY_PATH: '${{ github.workspace }}/integration/testrunner/test_private_key'
        run: |-
          IDENTITY_TOKEN="$(gcloud auth print-identity-token --impersonate-service-account=${{ env.WIF_SERVICE_ACCOUNT }} --include-email)"
          export AUDIT_CLIENT_TEST_IDTOKEN="${IDENTITY_TOKEN}"
          go test ./integration/testrunner -timeout=20m

      - name: 'Cleanup the infrastructure'
        if: '${{ always() }}'
        run: |
          terraform -chdir=${{ env.tf_module_dir}} apply -destroy -auto-approve -var-file=${{env.tfvar_file}}
