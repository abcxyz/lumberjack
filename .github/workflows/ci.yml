name: 'ci'

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:

env:
  DOCKER_REGISTRY: 'us-docker.pkg.dev'
  DOCKER_TAG: '${{ github.sha }}'
  DOCKER_REPO: 'us-docker.pkg.dev/lumberjack-dev-infra/images'
  WIF_PROVIDER: 'projects/638387980668/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
  WIF_SERVICE_ACCOUNT: 'gh-access-sa@lumberjack-dev-infra.iam.gserviceaccount.com'
  SERVER_PROJECT_ID: 'github-ci-server'
  CLIENT_PROJECT_ID: 'github-ci-app-0'
  BIGQUERY_DATASET_ID: 'audit_logs.audit_abcxyz_data_access'

concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  # Linting jobs - terraform, java, go
  terraform_lint:
    uses: 'abcxyz/pkg/.github/workflows/terraform-lint.yml@cc2b918b16df0f627b933ed8dddf0d846fa9108b' # ratchet:abcxyz/pkg/.github/workflows/terraform-lint.yml@main
    with:
      directory: 'terraform'
      terraform_version: '1.2'

  go_lint:
    uses: 'abcxyz/pkg/.github/workflows/go-lint.yml@main'
    with:
      go_version: '1.19'

  java_lint:
    uses: 'abcxyz/pkg/.github/workflows/java-lint.yml@cc2b918b16df0f627b933ed8dddf0d846fa9108b' # ratchet:abcxyz/pkg/.github/workflows/java-lint.yml@main
    with:
      directory: 'clients/java-logger'
      java_version: '11'

  # Unit tests - java, go
  go_test:
    uses: 'abcxyz/pkg/.github/workflows/go-test.yml@cc2b918b16df0f627b933ed8dddf0d846fa9108b' # ratchet:abcxyz/pkg/.github/workflows/go-test.yml@main
    with:
      go_version: '1.19'
      go_packages: |-
        $(go list ./... | grep -v -E 'lumberjack/third_party|lumberjack/integration')

  java_test:
    runs-on: 'ubuntu-latest'
    steps:
      - uses: 'actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8' # ratchet:actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@a18c333f3f14249953dab3e186e5e21bf3390f1d # ratchet:actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Run tests with Maven
        run: |-
          mvn clean test --no-transfer-progress -f clients/java-logger

  # lint_and_unit is a virtual job that is used as dependencies for later jobs.
  lint_and_unit:
    runs-on: 'ubuntu-latest'
    needs:
      - 'terraform_lint'
      - 'go_lint'
      - 'java_lint'
      - 'go_test'
      - 'java_test'
    steps:
      - run: 'echo prechecks complete'

  # Build the main lumberjack server and push to artifact registry
  build-lumberjack-server:
    runs-on: 'ubuntu-latest'
    needs:
      - 'lint_and_unit'
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: 'docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18' # ratchet:docker/setup-qemu-action@v2
      - name: 'Checkout'
        uses: 'actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b' # ratchet:actions/checkout@v3
      - uses: 'actions/setup-go@c4a742cab115ed795e34d4513e2cf7d472deb55f' # ratchet:actions/setup-go@v3
        with:
          go-version: '1.19'
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@ceee102ec2387dd9e844e01b530ccd4ec87ce955' # ratchet:google-github-actions/auth@v0
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'
      - name: 'Authenticate to Artifact Registry'
        uses: 'docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b' # ratchet:docker/login-action@v2
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.DOCKER_REGISTRY }}'
      # goreleaser requires a tag to publish images to container registry.
      # We create a local tag to make it happy.
      - run: |-
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -f -a v0.0.0-ci -m "CI run"
      - name: 'Build the main server container and push to the registry with goreleaser'
        uses: 'goreleaser/goreleaser-action@b508e2e3ef3b19d4e4146d4f8fb3ba9db644a757' # ratchet:goreleaser/goreleaser-action@v3
        with:
          version: 'v1.12.3' # Manually pinned
          args: 'release -f .goreleaser.docker.yaml --rm-dist'

  # Build the 4 integration test client variants, go-grpc, go-http, java-grpc and java-http
  build-go-grpc-client:
    runs-on: 'ubuntu-latest'
    needs:
      - 'lint_and_unit'
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      prefix: 'ljc'
      lang: 'go'
      type: 'grpc'
      file: './clients/go/test/grpc-app/Dockerfile'
      run_from: './'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b' # ratchet:actions/checkout@v3
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@ceee102ec2387dd9e844e01b530ccd4ec87ce955' # ratchet:google-github-actions/auth@v0
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'
      - name: 'Authenticate to Artifact Registry'
        uses: 'docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b' # ratchet:docker/login-action@v2
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.DOCKER_REGISTRY }}'
      - name: 'Build the integration test server container and push to the registry'
        uses: 'docker/build-push-action@c84f38281176d4c9cdb1626ffafcd6b3911b5d94' # ratchet:docker/build-push-action@v3
        with:
          push: true
          tags: '${{ env.DOCKER_REPO }}/${{env.prefix}}-${{env.lang}}-${{env.type}}:${{env.DOCKER_TAG}}'
          file: '${{ env.file }}'
          context: '${{ env.run_from }}'

  build-go-http-client:
    runs-on: 'ubuntu-latest'
    needs:
      - 'lint_and_unit'
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      prefix: 'ljc'
      lang: 'go'
      type: 'http'
      file: './clients/go/test/shell/Dockerfile'
      run_from: './'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b' # ratchet:actions/checkout@v3
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@ceee102ec2387dd9e844e01b530ccd4ec87ce955' # ratchet:google-github-actions/auth@v0
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'
      - name: 'Authenticate to Artifact Registry'
        uses: 'docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b' # ratchet:docker/login-action@v2
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.DOCKER_REGISTRY }}'
      - name: 'Build the integration test server container and push to the registry'
        uses: 'docker/build-push-action@c84f38281176d4c9cdb1626ffafcd6b3911b5d94' # ratchet:docker/build-push-action@v3
        with:
          push: true
          tags: '${{ env.DOCKER_REPO }}/${{env.prefix}}-${{env.lang}}-${{env.type}}:${{env.DOCKER_TAG}}'
          file: '${{ env.file }}'
          context: '${{ env.run_from }}'

  build-java-grpc-client:
    runs-on: 'ubuntu-latest'
    needs:
      - 'lint_and_unit'
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      prefix: 'ljc'
      lang: 'java'
      type: 'grpc'
      file: './clients/java-logger/scripts/server_app.dockerfile'
      run_from: './'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b' # ratchet:actions/checkout@v3
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@ceee102ec2387dd9e844e01b530ccd4ec87ce955' # ratchet:google-github-actions/auth@v0
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'
      - name: 'Authenticate to Artifact Registry'
        uses: 'docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b' # ratchet:docker/login-action@v2
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.DOCKER_REGISTRY }}'
      - name: 'Build the integration test server container and push to the registry'
        uses: 'docker/build-push-action@c84f38281176d4c9cdb1626ffafcd6b3911b5d94' # ratchet:docker/build-push-action@v3
        with:
          push: true
          tags: '${{ env.DOCKER_REPO }}/${{env.prefix}}-${{env.lang}}-${{env.type}}:${{env.DOCKER_TAG}}'
          file: '${{ env.file }}'
          context: '${{ env.run_from }}'

  build-java-http-client:
    runs-on: 'ubuntu-latest'
    needs:
      - 'lint_and_unit'
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      prefix: 'ljc'
      lang: 'java'
      type: 'http'
      file: './clients/java-logger/scripts/shell_app.dockerfile'
      run_from: './'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b' # ratchet:actions/checkout@v3
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@ceee102ec2387dd9e844e01b530ccd4ec87ce955' # ratchet:google-github-actions/auth@v0
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'
      - name: 'Authenticate to Artifact Registry'
        uses: 'docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b' # ratchet:docker/login-action@v2
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.DOCKER_REGISTRY }}'
      - name: 'Build the integration test server container and push to the registry'
        uses: 'docker/build-push-action@c84f38281176d4c9cdb1626ffafcd6b3911b5d94' # ratchet:docker/build-push-action@v3
        with:
          push: true
          tags: '${{ env.DOCKER_REPO }}/${{env.prefix}}-${{env.lang}}-${{env.type}}:${{env.DOCKER_TAG}}'
          file: '${{ env.file }}'
          context: '${{ env.run_from }}'

  # build is a virtual job that is used as dependencies for later jobs.
  build:
    runs-on: 'ubuntu-latest'
    needs:
      - 'build-lumberjack-server'
      - 'build-go-grpc-client'
      - 'build-go-http-client'
      - 'build-java-grpc-client'
      - 'build-java-http-client'
    steps:
      - run: 'echo build complete'

  # Deploy integration test infrastructure and run integration tests
  integration:
    runs-on: 'ubuntu-latest'
    needs:
      - 'build'
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      tf_module_dir: './terraform/modules/ci'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b' # ratchet:actions/checkout@v3
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@ceee102ec2387dd9e844e01b530ccd4ec87ce955' # ratchet:goe-github-actions/auth@v0
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'

      # TODO: Workload Identity doesn't work with GCS Provider.
      # https://github.com/google-github-actions/auth/issues/89
      - name: 'Workaround Terraform issue'
        shell: 'bash'
        run: |-
          echo "GOOGLE_OAUTH_ACCESS_TOKEN=${{ steps.auth.outputs.access_token }}" >> $GITHUB_ENV
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@17d4c9b8043b238f6f35641cdd8433da1e6f3867 # ratchet:hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: 'Write tfvars file'
        env:
          client_images: '\{\"ljc-go-grpc\":\"${{env.DOCKER_REPO}}/ljc-go-grpc:${{env.DOCKER_TAG}}\",\"ljc-go-http\":\"${{env.DOCKER_REPO}}/ljc-go-http:${{env.DOCKER_TAG}}\",\"ljc-java-grpc\":\"${{env.DOCKER_REPO}}/ljc-java-grpc:${{env.DOCKER_TAG}}\",\"ljc-java-http\":\"${{env.DOCKER_REPO}}/ljc-java-http:${{env.DOCKER_TAG}}\"\}'
          server_image: '${{env.DOCKER_REPO}}/lumberjack-server:${{env.DOCKER_TAG}}'
        run: |-
            var_file=/tmp/ci.tfvars

            touch /tmp/ci.tfvars
            echo commit_sha=\"${{ env.DOCKER_TAG }}\" >> ${var_file};
            echo server_project_id=\"${{ env.SERVER_PROJECT_ID }}\" >> ${var_file};
            echo server_image=\"${{ env.server_image }}\" >> ${var_file};
            echo server_service_name=\"lumberjack-server\" >> ${var_file};
            echo client_project_id=\"${{ env.CLIENT_PROJECT_ID }}\" >> ${var_file};
            echo client_images=${{ env.client_images }} >> ${var_file};
            echo >> ${var_file};

            cat ${var_file};
            echo "tfvar_file=${var_file}" >> $GITHUB_ENV;
      - name: 'Init the terraform infrastructure'
        run: terraform -chdir=${{ env.tf_module_dir }} init
      - name: 'Apply the infrastructure updates'
        id: 'tf_apply'
        run: |-
            terraform -chdir=${{ env.tf_module_dir}} apply -auto-approve -var-file=${{env.tfvar_file}};

            terraform -chdir=${{ env.tf_module_dir}} output -json client_endpoints | jq -c > output.json;

            grpc_client_endpoints=$(jq -c '{"ljc-go-grpc","ljc-java-grpc"} | to_entries | map(.value|tostring)' < output.json);
            http_client_endpoints=$(jq -c '{"ljc-go-http","ljc-java-http"} | to_entries | map(.value|tostring)' < output.json);

            echo "GRPC_ENDPOINTS=${grpc_client_endpoints}" >> $GITHUB_ENV;
            echo "HTTP_ENDPOINTS=${http_client_endpoints}" >> $GITHUB_ENV;

      - name: 'Setup Go'
        uses: 'actions/setup-go@fcdc43634adb5f7ae75a9d7a9b9361790f7293e2' # ratchet:actions/setup-go@v3
        with:
          go-version: '1.19'
      - name: 'Cache dependencies'
        uses: 'actions/cache@48af2dc4a9e8278b89d7fa154b955c30c6aaab09' # ratchet:actions/cache@v3
        with:
          path: |-
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-test-${{ hashFiles('**/go.sum') }}
          restore-keys: |-
            ${{ runner.os }}-go-
            ${{ runner.os }}-go-test-
      - name: 'Run tests'
        id: 'run-tests'
        run: |-
          export ID_TOKEN="$(gcloud auth print-identity-token --impersonate-service-account=${{ env.WIF_SERVICE_ACCOUNT }} --include-email)"

          go test ./integration/testrunner \
            -id-token="${ID_TOKEN}" \
            -project-id="${{ env.SERVER_PROJECT_ID }}" \
            -dataset-query="${{ env.BIGQUERY_DATASET_ID }}"

      - name: 'Cleanup the infrastructure'
        id: 'tf_destroy'
        if: always()
        run: terraform -chdir=${{ env.tf_module_dir}} apply -auto-approve -var-file=${{env.tfvar_file}};
